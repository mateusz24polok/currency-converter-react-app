{"version":3,"sources":["AppHeader/styled.js","AppHeader/index.js","AppWrapper/styled.js","AppWrapper/index.js","CurrencySelect/styled.js","CurrencySelect/index.js","CurrencyValueInput/index.js","CurrencySection/styled.js","CurrencySection/index.js","Button/styled.js","Button/index.js","Message/styled.js","Message/index.js","Form/index.js","Background/styled.js","Background/index.js","Clock/styled.js","Clock/index.js","Clock/useCurrentDate.js","App.js","serviceWorker.js","index.js"],"names":["Title","styled","h1","AppHeader","Wrapper","div","AppWrapper","children","StyledSelect","select","CurrencySelect","selectName","currencyChange","currencyArray","defaultSelection","name","onChange","map","currency","selected","key","value","CurrencyValueInput","currencyValue","currencyValueChangeHandler","className","placeholder","type","step","min","StyledSection","section","CurrencySection","StyledButton","button","Button","buttonContent","onClick","MessageContent","p","warning","css","info","Message","content","Form","currenciesArray","useState","firstCurrencyValue","setFirstCurrencyValue","secondCurrencyValue","setSecondCurrencyValue","firstCurrency","setFirstCurrency","secondCurrency","setSecondCurrency","exchangeDate","setExchangeDate","exchangeRate","setExchangeRate","useEffect","getExchangeData","then","exchangeData","basedCurrency","exchangedCurrency","a","fetch","exchangeDataResponse","json","date","rates","onButtonClick","toFixed","event","target","BackgroundImageContainer","BackgroundColorContainer","Background","ClockText","Clock","Date","setDate","intervalId","setInterval","clearInterval","useCurrentDate","toLocaleString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4qBAEO,IAAMA,EAAQC,IAAOC,GAAV,KCOHC,EANG,kBACd,kBAACH,EAAD,4B,kWCFG,IAAMI,EAAUH,IAAOI,IAAV,KCOLC,EANI,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACf,kBAACH,EAAD,KACKG,I,mdCHF,IAAMC,EAAeP,IAAOQ,OAAV,KCuBVC,EAtBQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,eAAgBC,EAA/B,EAA+BA,cAAeC,EAA9C,EAA8CA,iBAA9C,OACrB,kBAACN,EAAD,CACEO,KAAMJ,EACNK,SAAUJ,GAETC,EAAcI,KAAI,SAAAC,GACjB,OAAIA,IAAaJ,EAEb,4BAAQK,UAAQ,EAACC,IAAKF,EAAUG,MAAOH,GACpCA,GAKL,4BAAQE,IAAKF,EAAUG,MAAOH,GAC3BA,QCHII,G,MAZY,SAAC,GAAD,IAAEC,EAAF,EAAEA,cAAeC,EAAjB,EAAiBA,2BAAjB,OACvB,2BACAC,UAAU,wBACVC,YAAY,cACZL,MAAOE,EACPI,KAAK,SACLC,KAAK,OACLC,IAAI,IACJb,SAAUQ,M,iLCTP,IAAMM,EAAgB7B,IAAO8B,QAAV,KC0BXC,EAvBS,SAAC,GAMlB,IALLT,EAKI,EALJA,cACAC,EAII,EAJJA,2BACAZ,EAGI,EAHJA,eACAC,EAEI,EAFJA,cACAC,EACI,EADJA,iBAEA,OACE,kBAACgB,EAAD,KACE,kBAAC,EAAD,CACEnB,WAAW,YACXC,eAAgBA,EAChBC,cAAeA,EACfC,iBAAkBA,IAEpB,kBAAC,EAAD,CACES,cAAeA,EACfC,2BAA4BA,M,+gBCpB7B,IAAMS,EAAehC,IAAOiC,OAAV,KCSVC,EARA,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,QAAlB,OACb,kBAACJ,EAAD,CACEN,KAAK,SACLU,QAASA,GACRD,I,yrBCLE,IAAME,EAAiBrC,IAAOsC,EAAV,KAkBrB,qBAAGC,SAA0BC,YAAJ,QAKzB,qBAAGC,MAAoBD,YAAJ,QChBVE,EANC,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASF,EAAZ,EAAYA,KAAMF,EAAlB,EAAkBA,QAAlB,OACZ,kBAACF,EAAD,CAAgBI,KAAMA,EAAMF,QAASA,GAChCI,ICwGMC,EAxGF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAAsB,EAEkBC,mBAAS,GAF3B,mBAE3BC,EAF2B,KAEPC,EAFO,OAGoBF,mBAAS,GAH7B,mBAG3BG,EAH2B,KAGNC,EAHM,OAIQJ,mBAAS,OAJjB,mBAI3BK,EAJ2B,KAIZC,EAJY,OAKUN,mBAAS,OALnB,mBAK3BO,EAL2B,KAKXC,EALW,OAMMR,mBAAS,IANf,mBAM3BS,EAN2B,KAMbC,EANa,OAOMV,mBAAS,IAPf,mBAO3BW,EAP2B,KAObC,EAPa,KASlCC,qBAAU,WACeC,EAAgBT,EAAeE,GAEvCQ,MAAK,SAAAC,GACdZ,EAAuBH,EAAqBe,EAAaL,mBAG7D,CAACV,EAAoBI,EAAeE,IAaxC,IAAMO,EAAe,uCAAG,WAAOG,EAAeC,GAAtB,iBAAAC,EAAA,sEACeC,MAAM,+CAAD,OACWH,IAF/B,cACdI,EADc,gBAIOA,EAAqBC,OAJ5B,UAIdN,EAJc,OAKE,QAAlBC,GAAiD,QAAtBC,EALX,0CAMT,CACHP,aAAc,EACdF,aAAcO,EAAaO,OARf,iCAWT,CACHZ,aAAcK,EAAaQ,MAAMN,GACjCT,aAAcO,EAAaO,OAbf,4CAAH,wDAsCfE,EAAa,uCAAG,4BAAAN,EAAA,sEACSL,EACvBT,EACAE,GAHc,OACZS,EADY,OAKlBN,EAAgBM,EAAaP,cAC7BG,EAAgBI,EAAaL,aAAae,QAAQ,IANhC,2CAAH,qDASnB,OACI,0BAAMhD,UAAU,kBACZ,kBAAC,EAAD,CACID,2BAhCe,SAAAkD,GACvBzB,EAAsByB,EAAMC,OAAOtD,OACnCoC,EAAgB,KA+BRlC,cAAeyB,EACfpC,eAxBgB,SAAA8D,GACxBrB,EAAiBqB,EAAMC,OAAOtD,OAC9BoC,EAAgB,KAuBR5C,cAAeiC,EACfhC,iBAAiB,QAErB,kBAAC,EAAD,CACIU,2BAlCgB,SAAAkD,GACxBvB,EAAuBuB,EAAMC,OAAOtD,OACpCoC,EAAgB,KAiCRlC,cAAe2B,EACftC,eA1BiB,SAAA8D,GACzBnB,EAAkBmB,EAAMC,OAAOtD,OAC/BoC,EAAgB,KAyBR5C,cAAeiC,EACfhC,iBAAiB,QAErB,kBAAC,EAAD,CACIsB,cAAc,+BACdC,QAASmC,IAEb,kBAAC,EAAD,CACI5B,QAAO,0CAAqCY,EAArC,4DACyBE,GAChChB,OAAMc,M,6iBCtGf,IAAMoB,EAA2B3E,IAAOI,IAAV,KAaxBwE,EAA2B5E,IAAOI,IAAV,KCNtByE,EANI,kBACf,kBAACF,EAAD,KACI,kBAACC,EAAD,Q,gKCHD,IAAME,EAAY9E,IAAOsC,EAAV,KCUPyC,EARD,WACV,IAAMV,ECHoB,WAAO,IAAD,EACRvB,mBAAS,IAAIkC,MADL,mBACzBX,EADyB,KACnBY,EADmB,KAahC,OAVAtB,qBAAU,WACN,IAAMuB,EAAaC,aAAY,WAC3BF,EAAQ,IAAID,QACb,KAEH,OAAO,WACHI,cAAcF,MAEnB,IAEIb,EDVMgB,GAEb,OACI,kBAACP,EAAD,KAAYT,EAAKiB,mBEAnBzC,EAAkB,CACtB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAca0C,EAXH,kBACV,oCACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAM1C,gBAAiBA,KAEzB,kBAAC,EAAD,QCjBgB2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.95858e85.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Title = styled.h1`\r\n    color: rgba(157, 233, 145, 0.76);\r\n    text-align: center;\r\n    margin: 50px 0;\r\n    font-size: 32px;\r\n    text-transform: uppercase;\r\n    letter-spacing: 2px;\r\n    font-family: \"Itim\", cursive;\r\n\r\n    @media (max-width: 500px) {\r\n          margin: 40px auto;\r\n          font-size: 24px;\r\n          letter-spacing: 1px;\r\n  }\r\n`;","import React from 'react';\r\nimport { Title } from \"./styled\";\r\n\r\nconst AppHeader = () => (\r\n    <Title>\r\n        Currency Converter\r\n    </Title>\r\n);\r\n\r\nexport default AppHeader;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 600px;\r\n    background: rgba(15, 69, 76, 0.749);\r\n    padding: 5px 40px;\r\n    box-shadow: 3px -4px 5px 2px rgba(50, 50, 50, 0.75);\r\n    margin: 20px;\r\n    border-radius: 20px;\r\n\r\n    @media (max-width: 500px) {\r\n        padding: 0 10px;\r\n        margin: 10px;\r\n    }\r\n`;","import React from \"react\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst AppWrapper = ({ children }) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default AppWrapper;","import styled from \"styled-components\";\r\n\r\nexport const StyledSelect = styled.select`\r\n    font-size: 24px;\r\n    box-shadow: 3px -4px 5px 2px rgba(50, 50, 50, 0.75);\r\n    padding: 10px;\r\n    background-color: rgba(199, 194, 194, 0.801);\r\n    flex: 0 3 150px;\r\n    margin: 10px;\r\n    border-radius: 10px;\r\n\r\n    &:focus{\r\n        background-color: white;\r\n    }\r\n\r\n    @media (max-width: 500px) {\r\n        font-size: 20px;\r\n        padding: 5px;\r\n    }\r\n`;","import React from \"react\";\r\nimport { StyledSelect } from \"./styled\";\r\n\r\nconst CurrencySelect = ({ selectName, currencyChange, currencyArray, defaultSelection }) => (\r\n  <StyledSelect\r\n    name={selectName}\r\n    onChange={currencyChange}\r\n  >\r\n    {currencyArray.map(currency => {\r\n      if (currency === defaultSelection) {\r\n        return (\r\n          <option selected key={currency} value={currency}>\r\n            {currency}\r\n          </option>\r\n        );\r\n      }\r\n      return (\r\n        <option key={currency} value={currency}>\r\n          {currency}\r\n        </option>\r\n      );\r\n    })}\r\n  </StyledSelect>\r\n);\r\n\r\nexport default CurrencySelect;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst CurrencyValueInput = ({currencyValue, currencyValueChangeHandler})=>(\r\n    <input\r\n    className=\"calculatorForm__input\"\r\n    placeholder=\"enter value\"\r\n    value={currencyValue}\r\n    type=\"number\"\r\n    step=\"0.01\"\r\n    min=\"0\"\r\n    onChange={currencyValueChangeHandler}\r\n  />\r\n);\r\n\r\nexport default CurrencyValueInput;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    margin: 20px auto;\r\n`;","import React from \"react\";\r\nimport CurrencySelect from \"../CurrencySelect\";\r\nimport CurrencyValueInput from \"../CurrencyValueInput\";\r\nimport { StyledSection } from \"./styled\";\r\n\r\nconst CurrencySection = ({\r\n  currencyValue,\r\n  currencyValueChangeHandler,\r\n  currencyChange,\r\n  currencyArray,\r\n  defaultSelection\r\n}) => {\r\n  return (\r\n    <StyledSection>\r\n      <CurrencySelect\r\n        selectName=\"currency1\"\r\n        currencyChange={currencyChange}\r\n        currencyArray={currencyArray}\r\n        defaultSelection={defaultSelection}\r\n      />\r\n      <CurrencyValueInput\r\n        currencyValue={currencyValue}\r\n        currencyValueChangeHandler={currencyValueChangeHandler}\r\n      />\r\n    </StyledSection>\r\n  );\r\n};\r\n\r\nexport default CurrencySection;","import styled from \"styled-components\";\r\n\r\nexport const StyledButton = styled.button`\r\n    display: block;\r\n    margin: 0 auto;\r\n    border: none;\r\n    font-size: 24px;\r\n    padding: 10px;\r\n    box-shadow: 3px -4px 5px 2px rgba(50, 50, 50, 0.75);\r\n    cursor: pointer;\r\n    background-color: rgba(199, 194, 194, 0.801);\r\n    transition: background-color 0.15s linear;\r\n    border-radius: 10px;\r\n\r\n    &:hover{\r\n        background-color: white;\r\n    }\r\n\r\n    @media (max-width: 500px) {\r\n        font-size: 20px;\r\n        padding: 5px;\r\n    }\r\n`;","import React from 'react';\r\nimport { StyledButton } from \"./styled\";\r\n\r\nconst Button = ({ buttonContent, onClick }) => (\r\n  <StyledButton\r\n    type=\"button\"\r\n    onClick={onClick}>\r\n    {buttonContent}\r\n  </StyledButton>\r\n);\r\n\r\nexport default Button;","import styled, { css } from \"styled-components\";\r\n\r\nexport const MessageContent = styled.p`\r\n    height: 80px;\r\n    width: 400px;\r\n    font-size: 24px;\r\n    margin: 30px auto;\r\n    text-align: center;\r\n    opacity: 0;\r\n    color: transparent;\r\n    transition: opacity 0.2s linear;\r\n    line-height: 1;\r\n\r\n    @media (max-width: 500px) {\r\n        height: 80px;\r\n        width: 200px;\r\n        font-size: 20px;\r\n        margin: 20px auto;\r\n}\r\n\r\n    ${({ warning }) => (warning && css`\r\n        opacity: 1;\r\n        color: red;\r\n    `)}\r\n\r\n    ${({ info }) => (info && css`\r\n        opacity: 1;\r\n        color: rgba(157, 233, 145, 0.76);\r\n    `)}\r\n`;","import React from 'react';\r\nimport { MessageContent } from \"./styled\";\r\n\r\nconst Message = ({ content, info, warning }) => (\r\n    <MessageContent info={info} warning={warning}>\r\n        {content}\r\n    </MessageContent>\r\n);\r\n\r\nexport default Message;","import React, { useState, useEffect } from \"react\";\r\nimport CurrencySection from \"../CurrencySection\";\r\nimport Button from \"../Button\";\r\nimport Message from \"../Message\";\r\n\r\nconst Form = ({ currenciesArray }) => {\r\n\r\n    const [firstCurrencyValue, setFirstCurrencyValue] = useState(0);\r\n    const [secondCurrencyValue, setSecondCurrencyValue] = useState(0);\r\n    const [firstCurrency, setFirstCurrency] = useState(\"PLN\");\r\n    const [secondCurrency, setSecondCurrency] = useState(\"EUR\");\r\n    const [exchangeDate, setExchangeDate] = useState(\"\");\r\n    const [exchangeRate, setExchangeRate] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const exchangeData = getExchangeData(firstCurrency, secondCurrency);\r\n\r\n        exchangeData.then(exchangeData => {\r\n            setSecondCurrencyValue(firstCurrencyValue * exchangeData.exchangeRate)\r\n        })\r\n    },\r\n        [firstCurrencyValue, firstCurrency, secondCurrency])\r\n\r\n    // useEffect(() => {\r\n    //     const exchangeData = getExchangeData(\r\n    //         firstCurrency,\r\n    //         secondCurrency\r\n    //     );\r\n\r\n    //     exchangeData.then(exchangeData => {\r\n    //         setFirstCurrencyValue(secondCurrencyValue * 1 / exchangeData.exchangeRate)\r\n    //     })\r\n    // }, [secondCurrencyValue])\r\n\r\n    const getExchangeData = async (basedCurrency, exchangedCurrency) => {\r\n        const exchangeDataResponse = await fetch(\r\n            `https://api.exchangeratesapi.io/latest?base=${basedCurrency}`\r\n        );\r\n        const exchangeData = await exchangeDataResponse.json();\r\n        if (basedCurrency === \"EUR\" && exchangedCurrency === \"EUR\") {\r\n            return {\r\n                exchangeRate: 1,\r\n                exchangeDate: exchangeData.date\r\n            };\r\n        } else {\r\n            return {\r\n                exchangeRate: exchangeData.rates[exchangedCurrency],\r\n                exchangeDate: exchangeData.date\r\n            };\r\n        }\r\n    };\r\n\r\n    const onFirstInputChange = event => {\r\n        setFirstCurrencyValue(event.target.value);\r\n        setExchangeDate(\"\");\r\n    };\r\n\r\n    const onSecondInputChange = event => {\r\n        setSecondCurrencyValue(event.target.value);\r\n        setExchangeDate(\"\");\r\n    };\r\n\r\n    const onFirstSelectChange = event => {\r\n        setFirstCurrency(event.target.value);\r\n        setExchangeDate(\"\");\r\n    };\r\n\r\n    const onSecondSelectChange = event => {\r\n        setSecondCurrency(event.target.value);\r\n        setExchangeDate(\"\");\r\n    };\r\n\r\n    const onButtonClick = async () => {\r\n        const exchangeData = await getExchangeData(\r\n            firstCurrency,\r\n            secondCurrency\r\n        );\r\n        setExchangeDate(exchangeData.exchangeDate);\r\n        setExchangeRate(exchangeData.exchangeRate.toFixed(3));\r\n    };\r\n\r\n    return (\r\n        <form className=\"calculatorForm\">\r\n            <CurrencySection\r\n                currencyValueChangeHandler={onFirstInputChange}\r\n                currencyValue={firstCurrencyValue}\r\n                currencyChange={onFirstSelectChange}\r\n                currencyArray={currenciesArray}\r\n                defaultSelection=\"PLN\"\r\n            />\r\n            <CurrencySection\r\n                currencyValueChangeHandler={onSecondInputChange}\r\n                currencyValue={secondCurrencyValue}\r\n                currencyChange={onSecondSelectChange}\r\n                currencyArray={currenciesArray}\r\n                defaultSelection=\"EUR\"\r\n            />\r\n            <Button\r\n                buttonContent=\"Check exchange rate and date\"\r\n                onClick={onButtonClick}\r\n            />\r\n            <Message\r\n                content={`Your calculation is current for ${exchangeDate} \r\n                    and your exchange rate is ${exchangeRate}`}\r\n                info={exchangeDate ? true : false} />\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled from \"styled-components\";\r\n\r\nexport const BackgroundImageContainer = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: -2;\r\n    background-image: url(\"https://storage.needpix.com/rsynced_images/currency-3321101_1280.jpg\");\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center center;\r\n`;\r\n\r\nexport const BackgroundColorContainer = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: -1;\r\n    background-color: rgba(10, 10, 10, 0.705);\r\n`;","import React from \"react\";\r\nimport { BackgroundColorContainer, BackgroundImageContainer } from \"./styled\";\r\n\r\nconst Background = () => (\r\n    <BackgroundImageContainer>\r\n        <BackgroundColorContainer />\r\n    </BackgroundImageContainer>\r\n);\r\n\r\nexport default Background;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ClockText = styled.p`\r\n    text-align: right;\r\n    color: rgba(157, 233, 145, 0.76);\r\n    padding-right: 20px;\r\n`;","import React from \"react\";\r\nimport { ClockText } from \"./styled\";\r\nimport { useCurrentDate } from \"./useCurrentDate\";\r\n\r\nconst Clock = () => {\r\n    const date = useCurrentDate();\r\n\r\n    return (\r\n        <ClockText>{date.toLocaleString()}</ClockText>\r\n    )\r\n};\r\n\r\nexport default Clock;","import { useState, useEffect } from \"react\";\r\n\r\nexport const useCurrentDate = () => {\r\n    const [date, setDate] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            setDate(new Date());\r\n        }, 1000)\r\n\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        }\r\n    }, [])\r\n\r\n    return date;\r\n};","import React from \"react\";\nimport \"./index.css\";\nimport AppHeader from \"./AppHeader\";\nimport AppWrapper from \"./AppWrapper\";\nimport Form from \"./Form\";\nimport Background from \"./Background\";\nimport Clock from \"./Clock\";\n\nconst currenciesArray = [\n  \"PLN\",\n  \"EUR\",\n  \"USD\",\n  \"GBP\",\n  \"CHF\",\n  \"CZK\",\n  \"RUB\",\n  \"CAD\",\n  \"AUD\",\n  \"JPY\",\n  \"HUF\"\n];\n\nconst App = () => (\n  <>\n    <AppWrapper>\n      <Clock />\n      <AppHeader />\n      <Form currenciesArray={currenciesArray} />\n    </AppWrapper>\n    <Background />\n  </>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}